package ${package}.modules.${moduleName}.${controller};

import java.util.Arrays;
import java.util.Map;
import java.util.Date;

import com.swt.common.annotation.SysLog;
import com.swt.common.validator.ValidatorUtils;
import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
#if(${swagger})
import io.swagger.annotations.*;
#end
import ${package}.modules.${moduleName}.${entity}.${className}Entity;
import ${package}.modules.${moduleName}.${service}.${className}Service;
import ${package}.common.utils.PageUtils;
import ${package}.common.utils.R;
import ${package}.common.controller.AbstractController;

/**
 * ${api}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
#if(${swagger})
@Api(tags = "${api}",description="${comments} Controller")
#end
public class ${className}Controller extends AbstractController{
    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @GetMapping
#if(${swagger})
    @ApiOperation(value = "列表", notes = "分页查询${comments}",produces="application/json")
    @ApiImplicitParams({
#if(${search})
            @ApiImplicitParam(name = "${searchColumn.attrname}", value = "${searchColumn.comments}", required = false, paramType = "query", dataType = "${searchColumn.dataType}"),
#end
            @ApiImplicitParam(name = "page", value = "页码", required = false, paramType = "query", dataType = "int", defaultValue = "1"),
            @ApiImplicitParam(name = "limit", value = "每页条数", required = false, paramType = "query", dataType = "int", defaultValue = "10"),
            @ApiImplicitParam(name = "sidx", value = "页码", required = false, paramType = "query", dataType = "string"),
            @ApiImplicitParam(name = "order", value = "排序", required = false, paramType = "query", dataType = "string", defaultValue = "asc")
    })
#end
    public R list(@RequestParam #if(${swagger})@ApiParam(hidden = true)#end Map<String, Object> params) {
        PageUtils page = ${classname}Service.queryPage(params);
        return R.ok().put("page", page);
    }


    /**
     * 记录
     */
    @GetMapping("/{${pk.attrname}}")
#if(${swagger})
    @ApiOperation(value = "记录", notes = "根据ID查询单条${comments}详情",produces="application/json")
    @ApiImplicitParam(name = "${pk.attrname}", value = "${comments}ID", required = true,paramType = "path", dataType = "${pk.attrType}", defaultValue="${pk.example}")
#end
    public R info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
        ${className}Entity ${classname} = ${classname}Service.selectById(${pk.attrname});

        return R.ok().put("${classname}", ${classname});
    }

    /**
     * 记录
     */
    @SysLog("新增${comments}")
    @PostMapping
#if(${swagger})
    @ApiOperation(value = "新增", notes = "新增${comments}",produces="application/json")
#end
    public R save(@RequestBody ${className}Entity ${classname}){
#if($CrtUserId != '')
        //添加用户名
        ${classname}.set${CrtUserId}(getUserId());
#end
#if($CrtTime != '')
        //添加创建时间
        ${classname}.set${CrtTime}(new Date());
#end
        //校验
        ValidatorUtils.validateEntity(${classname});
        ${classname}Service.insert(${classname});

        return R.ok();
    }

    /**
     * 修改
     */
    @SysLog("修改${comments}")
    @PutMapping("/{${pk.attrname}}")
#if(${swagger})
    @ApiOperation(value = "修改", notes = "修改${comments}",produces="application/json")
    @ApiImplicitParam(name = "${pk.attrname}", value = "${comments}ID", required = true,paramType = "path", dataType = "${pk.attrType}", defaultValue="${pk.example}")
#end
    public R update(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname},@RequestBody ${className}Entity ${classname}){
#if($OptUserId != '')
    //添加用户名
        ${classname}.set${OptUserId}(getUserId());
#end
#if($OptTime != '')
        //添加创建时间
        ${classname}.set${OptTime}(new Date());
#end
        ${classname}.set${pk.attrName}(${pk.attrname});
        //校验
        ValidatorUtils.validateEntity(${classname});
        //全部更新
        ${classname}Service.updateAllColumnById(${classname});
        
        return R.ok();
    }

    /**
     * 删除
     */
    @SysLog("删除${comments}")
    @DeleteMapping
#if(${swagger})
    @ApiOperation(value = "删除", notes = "删除${comments}",produces="application/json")
    @ApiImplicitParam(name = "${pk.attrname}s", value = "${comments}ID", required = true,paramType = "body", dataType = "${pk.attrType}[]", defaultValue="[${pk.example}]")
#end
    public R delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
        ${classname}Service.deleteBatchIds(Arrays.asList(${pk.attrname}s));

        return R.ok();
    }

}

package ${package}.${modules}.${moduleName}.${controller};

import java.util.Arrays;
import java.util.Map;
import java.util.Date;

import com.alibaba.fastjson.JSONObject;
#if(${sysLog})
import com.swt.common.annotation.SysLog;
#end
import ${package}.common.utils.ResultBean;
import ${package}.common.utils.PageData;
import ${package}.common.utils.PageInfo;
import ${package}.common.group.ValidatorUtils;
import ${package}.common.validator.group.AddGroup;
import ${package}.common.validator.group.UpdateGroup;
#if(${permissions})
import org.apache.shiro.authz.annotation.RequiresPermissions;
#end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
#if(${swagger})
import io.swagger.annotations.*;
#end
import ${package}.${modules}.${moduleName}.${entity}.${className};
import ${package}.${modules}.${moduleName}.${service}.I${className}Service;

/**
 * ${api}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
#if(${swagger})
@Api(tags = "${api}", description = "${api}")
#end
public class ${className}Controller{

    @Autowired
    private I${className}Service ${classname}Service;

    /**
     * 列表
     */
    @GetMapping
#if(${permissions})
    @RequiresPermissions("${moduleName}:${pathName}:list")
#end
#if(${swagger})
    @ApiOperation(value = "列表", notes = "分页查询${comments}", produces = "application/json")
    @ApiResponses({
            @ApiResponse(code = 200, message = "success")
    })
#end
    public ResultBean<PageData<${className}>> list(PageInfo pageInfo, ${className} ${classname}) {
        PageData<${className}> page = ${classname}Service.queryPage(pageInfo, ${classname});
        ResultBean<PageData<${className}>> resultBean = new ResultBean<>();
        resultBean.setResult(page);
        return resultBean;
    }

    /**
     * 记录
     */
    @GetMapping("/{${pk.attrname}}")
#if(${permissions})
    @RequiresPermissions("${moduleName}:${pathName}:info")
#end
#if(${swagger})
    @ApiOperation(value = "记录", notes = "根据ID查询单条${comments}详情", produces = "application/json")
    @ApiImplicitParam(name = "${pk.attrname}", value = "${comments}ID", required = true, paramType = "path", dataType = "${pk.attrtype}", defaultValue = "${pk.example}")
    @ApiResponses({
            @ApiResponse(code = 200, message = "success")
    })
#end
    public ResultBean<${className}> info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}) {
        ${className} ${classname} = ${classname}Service.getById(${pk.attrname});
        ResultBean<${className}> resultBean = new ResultBean<>();
        resultBean.setResult(${classname});
        return resultBean;
    }

    /**
     * 新增
     */
#if(${sysLog})
    @SysLog("新增${comments}")
#end
    @PostMapping
#if(${permissions})
    @RequiresPermissions("${moduleName}:${pathName}:save")
#end
#if(${swagger})
    @ApiOperation(value = "新增", notes = "新增${comments}", produces = "application/json")
    @ApiResponses({
            @ApiResponse(code = 201, message = "创建成功"),
            @ApiResponse(code = 422, message = "参数校验失败")
    })
#end
    public ResultBean<Integer> save(@RequestBody ${className} ${classname}) {
#if($CrtUserId != '')
        //添加用户名
        ${classname}.set${CrtUserId}(getUserId());
#end
#if($CrtTime != '')
        //添加创建时间
        ${classname}.set${CrtTime}(new Date());
#end
        //校验
        ValidatorUtils.validate(${classname}, AddGroup.class);
        ${classname}Service.save(${classname});
        ResultBean<Integer> resultBean = new ResultBean<>();
        resultBean.setResult(1);
        return resultBean;
    }

    /**
     * 修改
     */
#if(${sysLog})
    @SysLog("修改${comments}")
#end
    @PutMapping("/{${pk.attrname}}")
#if(${permissions})
    @RequiresPermissions("${moduleName}:${pathName}:update")
#end
#if(${swagger})
    @ApiOperation(value = "修改", notes = "修改${comments}", produces = "application/json")
    @ApiImplicitParam(name = "${pk.attrname}", value = "${comments}ID", required = true, paramType = "path", dataType = "${pk.attrtype}", defaultValue = "${pk.example}")
    @ApiResponses({
            @ApiResponse(code = 200, message = "修改成功"),
            @ApiResponse(code = 422, message = "参数校验失败")
    })
#end
    public ResultBean<JSONObject> update(@RequestBody ${className} ${classname}) {
#if($OptUserId != '')
        //添加用户名
        ${classname}.set${OptUserId}(getUserId());
#end
#if($OptTime != '')
        //添加创建时间
        ${classname}.set${OptTime}(new Date());
#end
        //校验
        ValidatorUtils.validate(${classname}, UpdateGroup.class);
        //全部更新
        ${classname}Service.updateById(${classname});

        ResultBean<JSONObject> resultBean = new ResultBean<>();
        resultBean.setResult(new JSONObject());
        return resultBean;
    }

    /**
     * 删除单个
     */
#if(${sysLog})
    @SysLog("删除单个${comments}")
#end
    @DeleteMapping("/{${pk.attrname}}")
#if(${permissions})
    @RequiresPermissions("${moduleName}:${pathName}:delete")
#end
#if(${swagger})
    @ApiOperation(value = "删除单个", notes = "删除单个${comments}", produces = "application/json")
    @ApiImplicitParam(name = "${pk.attrname}", value = "${comments}ID", required = true, paramType = "path", dataType = "${pk.attrtype}", defaultValue = "${pk.example}")
    @ApiResponses({
            @ApiResponse(code = 204, message = "删除成功")
    })
#end
    public ResultBean<JSONObject> delete(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}) {
        ${classname}Service.removeById(${pk.attrname});
        ResultBean<JSONObject> resultBean = new ResultBean<>();
        resultBean.setResult(new JSONObject());
        return resultBean;
    }

    /**
     * 批量删除
     */
#if(${sysLog})
    @SysLog("删除多个${comments}")
#end
    @DeleteMapping
#if(${permissions})
    @RequiresPermissions("${moduleName}:${pathName}:deletes")
#end
#if(${swagger})
    @ApiOperation(value = "删除多个", notes = "一次性删除多个${comments}", produces = "application/json")
    @ApiImplicitParam(name = "${pk.attrname}s", value = "${comments}ID", required = true, paramType = "body", dataType = "${pk.attrtype}[]", defaultValue = "[${pk.example}]")
    @ApiResponses({
            @ApiResponse(code = 204, message = "删除成功")
    })
#end
    public ResultBean<JSONObject>  deletes(@RequestBody ${pk.attrType}[] ${pk.attrname}s) {
        ${classname}Service.removeByIds(Arrays.asList(${pk.attrname}s));
        ResultBean<JSONObject> resultBean = new ResultBean<>();
        resultBean.setResult(new JSONObject());
        return resultBean;
    }

}

package ${package}.${modules}.${moduleName}.${controller};

import java.util.Arrays;
import java.util.Map;
import java.util.Date;

import com.alibaba.fastjson.JSONObject;
import com.sc.commomlib.ge.utils.support.ResultBean;
import com.sc.commonlib.ge.dbtool.plus.page.PageData;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.sc.tv.base.common.session.validator.ValidatorUtils;
import com.sc.tv.base.common.session.validator.group.AddGroup;
import com.sc.tv.base.common.session.validator.group.UpdateGroup;
import com.sc.commonlib.ge.dbtool.plus.page.PageInfo;
#if(${swagger})
import io.swagger.annotations.*;
#end
import com.sc.tv.base.entity.pb.bean.${className};
import com.sc.tv.tm.service.builder.${className}Service;

/**
 * ${api}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
#if(${swagger})
@Api(tags = "${api}", description = "${api}")
#end
public class ${className}Controller{

    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @GetMapping
#if(${swagger})
    @ApiOperation(value = "列表", notes = "分页查询${comments}", produces = "application/json")
    @ApiImplicitParams({
#foreach ($searchColumn in $searchColumns)
            @ApiImplicitParam(name = "${searchColumn.attrname}", value = "${searchColumn.comments}", required = false, paramType = "query", dataType = "${searchColumn.attrtype}"),
#end
            @ApiImplicitParam(name = "page", value = "页码", required = false, paramType = "query", dataType = "int", defaultValue = "1"),
            @ApiImplicitParam(name = "limit", value = "每页条数", required = false, paramType = "query", dataType = "int", defaultValue = "10"),
            @ApiImplicitParam(name = "sidx", value = "排序字段", required = false, paramType = "query", dataType = "string"),
            @ApiImplicitParam(name = "order", value = "升降序", required = false, paramType = "query", dataType = "string", defaultValue = "asc")
    })
    @ApiResponses({
            @ApiResponse(code = 200, message = "success")
    })
#end
    public ResultBean<PageData<${className}>> list(PageInfo pageInfo, ${className} ${classname}) {
        PageData<${className}> page = ${classname}Service.queryPage(pageInfo, ${classname});
        ResultBean<PageData<${className}>> resultBean = new ResultBean<>();
        resultBean.setResult(page);
        return resultBean;
    }


    /**
     * 记录
     */
    @GetMapping("/{${pk.attrname}}")
#if(${swagger})
    @ApiOperation(value = "记录", notes = "根据ID查询单条${comments}详情", produces = "application/json")
    @ApiImplicitParam(name = "${pk.attrname}", value = "${comments}ID", required = true, paramType = "path", dataType = "${pk.attrtype}", defaultValue = "${pk.example}")
    @ApiResponses({
            @ApiResponse(code = 200, message = "success")
    })
#end
    public ResultBean<${className}> info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}) {
        ${className} ${classname} = ${classname}Service.getById(${pk.attrname});
        ResultBean<${className}> resultBean = new ResultBean<>();
        resultBean.setResult(${classname});
        return resultBean;
    }

    /**
     * 新增
     */
    @PostMapping("add")
#if(${swagger})
    @ApiOperation(value = "新增", notes = "新增${comments}", produces = "application/json")
    @ApiResponses({
            @ApiResponse(code = 201, message = "创建成功"),
            @ApiResponse(code = 422, message = "参数校验失败")
    })
#end
    public ResultBean<Integer> save(@RequestBody ${className} ${classname}) {
#if($CrtUserId != '')
        //添加用户名
        ${classname}.set${CrtUserId}(getUserId());
#end
#if($CrtTime != '')
        //添加创建时间
        ${classname}.set${CrtTime}(new Date());
#end
        //校验
        ValidatorUtils.validate(${classname}, AddGroup.class);
        ${classname}Service.save(${classname});
        ResultBean<Integer> resultBean = new ResultBean<>();
        resultBean.setResult(1);
        return resultBean;
    }

    /**
     * 修改
     */
    @PostMapping("/{${pk.attrname}}/update")
#if(${swagger})
    @ApiOperation(value = "修改", notes = "修改${comments}", produces = "application/json")
    @ApiImplicitParam(name = "${pk.attrname}", value = "${comments}ID", required = true, paramType = "path", dataType = "${pk.attrtype}", defaultValue = "${pk.example}")
    @ApiResponses({
            @ApiResponse(code = 200, message = "修改成功"),
            @ApiResponse(code = 422, message = "参数校验失败")
    })
#end
    public ResultBean<JSONObject> update(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}, @RequestBody ${className} ${classname}) {
#if($OptUserId != '')
        //添加用户名
        ${classname}.set${OptUserId}(getUserId());
#end
#if($OptTime != '')
        //添加创建时间
        ${classname}.set${OptTime}(new Date());
#end
        ${classname}.set${pk.attrName}(${pk.attrname});
        //校验
        ValidatorUtils.validate(${classname}, UpdateGroup.class);
        //全部更新
        ${classname}Service.updateById(${classname});

        ResultBean<JSONObject> resultBean = new ResultBean<>();
        resultBean.setResult(new JSONObject());
        return resultBean;
    }

    /**
     * 删除单个
     */
    @PostMapping("/{${pk.attrname}}/delete")
#if(${swagger})
    @ApiOperation(value = "删除单个", notes = "删除单个${comments}", produces = "application/json")
    @ApiImplicitParam(name = "${pk.attrname}", value = "${comments}ID", required = true, paramType = "path", dataType = "${pk.attrtype}", defaultValue = "${pk.example}")
    @ApiResponses({
            @ApiResponse(code = 204, message = "删除成功")
    })
#end
    public ResultBean<JSONObject> delete(@PathVariable ${pk.attrType} ${pk.attrname}) {
        ${classname}Service.removeById(${pk.attrname});
        ResultBean<JSONObject> resultBean = new ResultBean<>();
        resultBean.setResult(new JSONObject());
        return resultBean;
    }

    /**
     * 批量删除
     */
    @PostMapping("batch-delete")
#if(${swagger})
    @ApiOperation(value = "删除多个", notes = "一次性删除多个${comments}", produces = "application/json")
    @ApiImplicitParam(name = "${pk.attrname}s", value = "${comments}ID", required = true, paramType = "body", dataType = "${pk.attrtype}[]", defaultValue = "[${pk.example}]")
    @ApiResponses({
            @ApiResponse(code = 204, message = "删除成功")
    })
#end
    public ResultBean<JSONObject>  deletes(@RequestBody ${pk.attrType}[] ${pk.attrname}s) {
        ${classname}Service.removeByIds(Arrays.asList(${pk.attrname}s));
        ResultBean<JSONObject> resultBean = new ResultBean<>();
        resultBean.setResult(new JSONObject());
        return resultBean;
    }

}
